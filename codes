1)  large factorial

static void extraLongFactorials(int n) {
BigInteger fact=BigInteger.valueOf(1);
for(int i=1;i<=n;i++){
fact=fact.multiply(BigInteger.valueOf(i));
}
System.out.println(fact);
}


2)  encryption

int main(){
string s;
cin >> s;
auto n = s.size();
int row = round(sqrt(n));
int column;
if (row >= sqrt(n)) column = row; else column = row + 1;
for(int j=0;j<column;++j) {
for(int i=j; i<n;i+=column)cout << s[i];
cout << ' ';
}
return 0;
}


3) string count


public class Myfun {
private Digraph graph;
private String regexp;
private final int m;

public Myfun(String regexp) {
this.regexp = regexp;
m = regexp.length();
Stack<Integer> ops = new Stack<Integer>();
graph = new Digraph(m+1);
for (int i = 0; i < m; i++) {
int lp = i;
if (regexp.charAt(i) == '(' || regexp.charAt(i) == '|')
ops.push(i);
else if (regexp.charAt(i) == ')') {
int or = ops.pop();
// 2-way or operator
if (regexp.charAt(or) == '|') {
lp = ops.pop();
graph.addEdge(lp, or+1);
graph.addEdge(or, i);
}

else if (regexp.charAt(or) == '(')

lp = or;

else assert false;
}
if (i < m-1 && regexp.charAt(i+1) == '*') {
graph.addEdge(lp, i+1);
graph.addEdge(i+1, lp);
}
if (regexp.charAt(i) == '(' || regexp.charAt(i) == '*' ||
regexp.charAt(i) == ')')
graph.addEdge(i, i+1);
}
if (ops.size() != 0)
throw new IllegalArgumentException("Invalid regular
expression");
}
public boolean recognizes(String txt) {
DirectedDFS dfs = new DirectedDFS(graph, 0);
Bag<Integer> pc = new Bag<Integer>();
for (int v = 0; v < graph.V(); v++)
if (dfs.marked(v)) pc.add(v);
for (int i = 0; i < txt.length(); i++) {
if (txt.charAt(i) == '*' || txt.charAt(i) == '|' ||
txt.charAt(i) == '(' || txt.charAt(i) == ')')
throw new IllegalArgumentException("text contains the
metacharacter '" + txt.charAt(i) + "'");
Bag<Integer> match = new Bag<Integer>();
for (int v : pc) {
if (v == m) continue;
if ((regexp.charAt(v) == txt.charAt(i)) || regexp.charAt(v)
== '.')
match.add(v+1);
}
dfs = new DirectedDFS(graph, match);
pc = new Bag<Integer>();
for (int v = 0; v < graph.V(); v++)
if (dfs.marked(v)) pc.add(v);
// optimization if no states reachable
if (pc.size() == 0) return false;
}
// check for accept state
for (int v : pc)
if (v == m) return true;
return false;
}
public static void main(String[] args) {
String regexp = "(" + args[0] + ")";
String txt = args[1];
Myfun nfa = new Myfun(regexp);
StdOut.println(nfa.recognizes(txt));
}
